#!KAMAILIO

#!include_file "lb.cfg"

debug=2
memdbg=4
memlog=4
log_stderror=no

log_facility=LOG_LOCAL0

fork=yes

server_header="Server: VER"
server_signature = yes 
user_agent_header="User-Agent: VER"

mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules_k:/usr/lib/x86_64-linux-gnu/kamailio/modules:/usr/lib/x86_64-linux-gnu/kamailio/modules_s"


loadmodule "tm.so"
#modparam("tm","fr_timer",FR_TIMER)            # 100 ms for initial timeout
modparam("tm","fr_timer",FR_TIMER_REMOTE)       # 300 ms for initial timeout
#modparam("tm","fr_inv_timer",FR_INV_TIMER)
modparam("tm", "auto_inv_100_reason", "Trying")
modparam("tm", "contacts_avp", "tm_contacts")
modparam("tm", "contact_flows_avp", "tm_contact_flows")

loadmodule "tmx.so"

loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "siputils.so"
loadmodule "textops.so"

loadmodule "ctl.so"
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

loadmodule "kex.so"
loadmodule "avpops.so"

loadmodule "pv.so"
modparam("pv", "avp_aliases", "dispatch_dst=i:271; dispatch_grp=i:272; dispatch_cnt=i:273");

loadmodule "htable.so"
modparam("htable","htable","loop_check=>size=14;autoexpire=30;")
modparam("htable","htable","log_check=>size=14;autoexpire=60;")
modparam("htable","htable","log_count=>size=14;autoexpire=120;")

loadmodule "rr.so"
modparam("rr", "enable_full_lr",0)
modparam("rr", "append_fromtag",1)
modparam("rr", "enable_double_rr",1)
#modparam("rr", "add_username",0)

loadmodule "xlog.so"
modparam("xlog", "buf_size",4096)

loadmodule "dispatcher.so"
modparam("dispatcher","flags",2)
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher","dst_avp","$avp(dispatch_dst)")
modparam("dispatcher","grp_avp","$avp(dispatch_grp)")
modparam("dispatcher","cnt_avp","$avp(dispatch_cnt)")
modparam("dispatcher","ds_ping_method","OPTIONS")
modparam("dispatcher","ds_ping_from","sip:monitoring@yeti-switch.org")
modparam("dispatcher","ds_ping_interval",30)
modparam("dispatcher","ds_probing_mode",1)
modparam("dispatcher","ds_probing_threshold", 2)
modparam("dispatcher","ds_ping_reply_codes", "class=2;code=404");


#!define REPLY_SHUTDOWN_MODE     "508"
#!define REPLY_OVERLOADED        "509"

# Routing configuration
route {
	# Initial sanity check
	route(REQINIT);

	if(has_totag()) {
		# handle requests within SIP dialogs
		route(WITHINDLG);
	} else {
		#handle requests outside SIP dialogs (initial or OoD) 
		route(OUTSIDEDLG);
	}
}

# Per SIP request initial check
route[REQINIT] {
	# Initial sanity check to ensure the message isn't too big
	if(msg:len > 8192) {
		xlog("L_ERR", "[$ci] $si Message too big - M=$rm RURI=$ru F=$fu T=$tu");
		t_reply("513", "Message Too Big");
		exit;
	}

	# Ensure we aren't in a tight loop for some reason
	# this number could probably be lower.
	if( !mf_process_maxfwd_header("20") && !is_method("OPTIONS") ) {
		xlog("L_ERR", "[$ci] $si Too many hops - M=$rm RURI=$ru F=$fu T=$tu . Replying 483 Too Many Hops");
		t_reply("483", "Too Many Hops");
		exit;
	}

	# Filter out SIP messages that should not come though this system
	if(is_method("REGISTER|MESSAGE")) {
		xlog("L_INFO", "[$ci] $si This SIP method is not handled here - M=$rm RURI=$ru F=$fu T=$tu . Dropping");
		# sl_send_reply("404", "Not here");
		drop;
	}
}


# Handle requests within SIP dialogs
route[WITHINDLG] {
	# If we are in-dialog loose_route() should return true and we should
	# end up inside next IF.
	if(loose_route()) {
		if(is_method("INVITE")) {
			record_route();
			t_set_fr(FR_INV_TIMER_REMOTE,FR_TIMER_REMOTE_HIGH);
		}
		route(RELAY);
		exit;
	} else {
		if(is_method("ACK")) {
			# relay only ACKs belonging to an active transaction
			# - otherwise we have no routing info for it (should have
			# gone via above loose_route() IF)
			if(t_check_trans()) {
				# no loose-route, but stateful ACK;
				# must be an ACK after a 487
				# or e.g. 404 from upstream server
				xlog("L_INFO", "[$ci] $si Stateful ACK without Route in dialog. Will relay anyway. Method: $rm, URI: $ru F: $fu T: $tu");
				route(RELAY);
			} else {
				# ACK without matching transaction ... ignore and discard
				exit;
			}
		}

		# within-dialog messages without Route are rejected
		xlog("L_NOTICE", "[$ci] $si Bogus message within dialog - no Route info. REJECTING  ###  method <$rm> : URI=$ru F=$fu T=$tu IP=$si\n");
		sl_send_reply("404","Not here");
		exit;
	}
}

route[OUTSIDEDLG] {
	# drop any ACK here
	# within dialog ACK should have been gone via has_totag() + loose_route()
	if(is_method("ACK")){
		exit;
	}
	
	# CANCEL processing - just relay, TM module takes care
	if(is_method("CANCEL")) {
		xlog("L_NOTICE", "[$ci] $si CANCEL $rU F=$fu IP=$si\n");

		if(!t_relay_cancel()) { # implicit drop if relaying was successful, nothing to do
			# corresponding INVITE transaction found but error occurred
			sl_reply("500", "Internal Server Error");
			drop;
		}

		# bad luck, corresponding INVITE transaction is missing, just drop it
		xlog("L_NOTICE", "[$ci] $si Dropping Bogus CANCEL ### $rU IP=$si");
		drop;
	}

	if(is_method("OPTIONS")) {
		# respond to OPTIONS from trusted IP's
		xlog("L_DBG", "[$ci] $si Got  OPTIONS IP=$si\n");
		sl_send_reply("200","OK");
		exit;
	}

	# The only verb which is allowed past this point is
	# an invite.  All other valid messages should have been
	# accounted for previously.
	if(!is_method("INVITE")) {
		xlog("L_ERR", "[$ci] $si DROPPING unhandled message !!!! ### method <$rm> : URI=$ru F=$fu T=$tu IP=$si");
		# sl_send_reply("404", "Not here");
		exit;
	}
	# replace from_uri
#	if(pcre_match_group("$fU",0)){
#		xlog("L_DBG", "replace: $fU -> HIDDEN_fU");
#		$sht(replaced=>$ci::$cs::$ft) = $fU;
#		$fU = "HIDDEN_fU";
#	}

	# t_check_trans will exit script on retransmit.
	t_check_trans();

	# Check to make sure we don't already have an active
	# transaction for this call-id, c-seq, and from-tag
	# RFC3261 - 8.2.2.2

	# We are going to add a key for this unique record if one
	# doesn't already exist.  The key automatically times out 
	# after 30 seconds, so we need not worry about cleanup

	if($sht(loop_check=>$ci::$cs::$ft) == $null) {
		xlog("L_DBG","[$ci] $si No transaction found, adding to our hashtable");
		$sht(loop_check=>$ci::$cs::$ft) = 1;    
	} else {
		xlog("L_ERR","[$ci] $si Loop Detected: $ci::$cs::$ft");
		sl_send_reply("482","Loop Detected - Duplicate Session Presentation");
		exit;
	}

	# Perform Record Routing to ensure the remainder of the 
	# transaction comes back through our gateway server
	record_route();

	# Reply with 100 Trying
	sl_send_reply("100","Trying");

	route(LOAD_BALANCE);

	exit;
}

# Handles relay of all non INVITE messages 
# All messages which were routed via the loose_route
# condition will end up here.  If there is a message that fails
# to t_rely there probably isn't much we can do other than
# return an error.
route[RELAY]{
	xlog("L_DBG", "[$ci] $si Setting up reply handler and relaying request method <$rm> : URI=$ru \n");

	# t_on_reply("REPLY_ONE");
	if(!t_relay()){
		xlog("L_NOTICE", "[$ci] $si ERROR ### t_relay: method <$rm> : URI=$ru F=$fu T=$tu IP=$si");
		sl_reply_error();
	} else {
		xlog("L_DBG", "[$ci] $si non-INVITE ### t_relay: method <$rm> : URI=$ru F=$fu T=$tu IP=$si\n");
	}
	exit;
}


## Load Balance for SBC nodes
route[LOAD_BALANCE] {
	remove_hf("X-ORIG-IP");
	append_hf("X-ORIG-IP: $si\r\n");

	remove_hf("X-ORIG-PORT");
	append_hf("X-ORIG-PORT: $sp\r\n");

	remove_hf("X-ORIG-PROTO");
	if($proto=="udp") {
	        append_hf("X-ORIG-PROTO: 1\r\n");
	} else if ($proto=="tcp") {
		append_hf("X-ORIG-PROTO: 2\r\n");
	} else if ($proto=="tls") {
                append_hf("X-ORIG-PROTO: 3\r\n");
	} else if ($proto=="sctp") {
                append_hf("X-ORIG-PROTO: 4\r\n");
	}

	if(ds_select_dst("GRP_ID", "BALANCE_ALG")) {
		xlog("L_NOTICE", "[$ci] $si Nexthop for $si:  dst: '$avp(dispatch_dst)' grp: '$avp(dispatch_grp)' cnt: '$avp(dispatch_cnt)'\n");
		t_on_reply("LB_REPLY");
		t_on_failure("LB_FAIL");
		if(!t_relay()) {
			sl_reply_error();
			xlog("L_ERR", "[$ci] $si ERROR ### t_relay: method <$rm> : URI=$ru F=$fu T=$tu");
		} else {
			xlog("L_DBG", "[$ci] $si MGW node: RU=$rU  dst_avp=$avp(dispatch_dst)");
		}
	} else {
		xlog("L_ERR", "[$ci] $si No Dispatcher Destination - M=$rm RURI=$ru F=$fu T=$tu");
		sl_send_reply("500", "Internal Server Error - No destination");
	}
	exit;
}

onreply_route[LB_REPLY] {
	xlog("L_DBG", "[$ci] $si LB Reply - S=$rs D=$rr F=$fu T=$tu");
}

# Handles failure of INVITE forwarding
failure_route[LB_FAIL] {

	# check first for cancelled transactions
	# we get here because the invite will have 487 reply code
	if(t_is_canceled()){
		xlog("L_DBG","[$ci] $si Transaction was cancelled\n");
		exit;
	}
	
        $var(mark_node)=0;
        $var(select_next_dst)=0;

		
       if(t_check_status(REPLY_SHUTDOWN_MODE)) {
                xlog("L_INFO","[$ci] $si Got a [$T_reply_code] error from $T_rpl($si). Node in shutdown mode");
                $var(mark_node)=1;
                $var(select_next_dst)=1;
        } else if (t_check_status(REPLY_OVERLOADED)) {
                xlog("L_INFO","[$ci] $si Got a [$T_reply_code] error from $T_rpl($si). Node is overloaed");
                $var(select_next_dst)=1;
        } else if (!t_any_replied() && t_check_status("408")){
                xlog("L_ERR","[$ci] $si -> No reply from $T_rpl($si). RURI $ru Try the next destination");
                $var(select_next_dst)=1;
        } else {
                xlog("L_NOTICE","[$ci] $si Node respond reject code [$T_reply_code]");
        }
        
        
        if($var(mark_node)){
                xlog("L_ERR","[$ci] $si -> Mark node for probing");
                ds_mark_dst("ip");
        }

        if($var(select_next_dst)){
                # try to relay again
                if(ds_select_dst("2", "0")) {
                        t_on_reply("LB_REPLY_DBG");
                        t_on_failure("LB_FAIL_DBG");
                        t_relay();
                        xlog("L_ERR", "[$ci] $si Rerouting to $avp(dispatch_dst)");
                        exit;
                } else {
                        # let the reply go upstream - it is default action
                        xlog("L_ERR", "[$ci] $si No Next Dispather Destination - M=$rm RURI=$ru F=$fu T=$tu");
                        exit;
                }
        }

}

# Executed once at startup
event_route[htable:mod-init] {
	xlog("L_INFO","VER started\n");
}


